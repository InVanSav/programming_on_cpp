#include <iostream>
#include <vector>
#include <fstream>
#include <math.h>

void siftDown(std::vector<int> &heap, int n) {
  
  while (n * 2 + 1 <= heap.size() - 1) {
    
    int left(n * 2 + 1);
    int right(n * 2 + 2);
    int j(left);
    
    if (right < heap.size() && heap[right] > heap[left]) {
      j = right;
    }
    if (heap[n] > heap[j]) {
      break;
    }
    
    std::swap(heap[n], heap[j]);
    n = j;
  }
}

int main() {
  
  std::ifstream fin("input.txt");
  std::ofstream fout("output.txt");
  
  long long answer(0);
  int n, m;
  fin >> n >> m;
  int rightBorder(pow(2, int(log2(n))));
  std::vector<int> heap(n);

  for (int i(0); i < n; i++) {
    fin >> heap[i];
  }
  for (int i(rightBorder); i >= 0; i--) {
    siftDown(heap, i);
  }

  for (int i(m); i > 0; i--) {
    heap[0] /= 10;
    siftDown(heap, 0);
  }
  
  for (auto i : heap) {
    answer += i;
  }
  
  fout << answer;
  return 0;
}