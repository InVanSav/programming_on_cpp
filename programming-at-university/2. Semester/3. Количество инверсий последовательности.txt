#include <iostream>
#include <vector>
#include <valarray>
#include <fstream>


std::vector<int> merge(std::vector<int> first, std::vector<int> second, long long &count) {
  
  int i(0), j(0), k(0);
  std::vector<int> res(first.size() + second.size());
  
  while (i < first.size() && j < second.size()) {
    
    if (first[i] > second[j]) {
      res[k] = second[j];
      k++;
      j++;
      count += res.size()/2 - i;
    } else {
      res[k] = first[i];
      k++;
      i++;
    }
    
  }
  
  if (i == first.size() && j < second.size()) {
    
    while (j < second.size()) {
      res[k] = second[j];
      k++;
      j++;
    }
    
  } else if (i < first.size() && j == second.size()) {
    
    while (i < first.size()) {
        res[k] = first[i];
        k++;
        i++;
    }
    
  }
  
  return res;
}


std::vector<int> merge_sort(std::vector<int> v, int length, long long &count) {
  
  if (length == 1) {
    return v;
  } else {
    std::vector<int> first_part;
    std::vector<int> second_part;
  
    for (int i(0); i < length / 2; i++) {
      first_part.push_back(v[i]);
    }
    
    for (int i(length / 2); i < length; i++) {
      second_part.push_back(v[i]);
    }
    
    return merge(merge_sort(first_part, length / 2, count),
                 merge_sort(second_part, length - length / 2, count), count);
  }
}

int main() {

  std::ifstream fin("input.txt");
  std::ofstream fout("output.txt");

  long long count(0);
  int n;
  fin >> n;
  std::vector<int> v(n);
  
  for (int i(0); i < n; i++) {
    fin >> v[i];
  }
  
  merge_sort(v, n, count);
  fout << count;
  
  return 0;
}