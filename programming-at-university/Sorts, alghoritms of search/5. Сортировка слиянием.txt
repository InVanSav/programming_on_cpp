#include <iostream>
#include <time.h>
#include <vector>
#include <algorithm>

using namespace std;

int random(int min, int max) {

    static bool flag = false;

    if (!flag) {
        srand(time(nullptr));
        flag = true;
    }

    return min + rand() % (max - min);
}

void push_v(vector<int>& v, int n) {

    v.clear();
    for (int i = 0; i < n; i++) {
        v.push_back(random(-10000, 10000));
    }

}

void MergeSort(vector<int>& v, int begin, int end) {

    if (begin == end) {
        return;
    }

    int mid = (begin + end) / 2;

    MergeSort(v, begin, mid);
    MergeSort(v, mid + 1, end);

    vector<int> t;

    for (int i = begin, j = mid + 1; i <= mid || j <= end;) {

        if (i > mid) {
            t.push_back(v[j++]);
        } else if (j > end) {
            t.push_back(v[i++]);
        } else if (v[i] <= v[j]) {
            t.push_back(v[i++]);
        } else {
            t.push_back(v[j++]);
        }
    }

    for (int i = 0; i < t.size(); i++) {
        v[begin + i] = t[i];
    }
}

bool is_break(unsigned int search_time) {
    if (search_time > 180000) {
        return true;
    }
    return false;
}

int main() {

    vector<int> v;
    vector<int> buff_arr;
    vector<vector<unsigned int>> merge_time_test(10);
    vector<unsigned int> merge_mid_time;
    unsigned int search_time, start_time_global = clock(), start_time, end_time;

    cout << "\t";

    for (int i = 1; i <= 4; i++) {
        for (int j = 0; j < 10; j++) {

            push_v(v, pow(10, i));
            buff_arr = v;

            start_time = clock();
            MergeSort(buff_arr, 0, pow(10, i) - 1);
            end_time = clock();
            search_time = end_time - start_time;
            merge_time_test[i - 1].push_back(search_time);

            cout << "Number operation: " << j + 1 << "; Value: " << search_time << "\n";

            if (is_break(search_time)) {
                break;
            }
        }
        cout << "\t";
    }

    unsigned int end_time_global = clock();

    for (int i = 0; i < 10; i++)
    {
        unsigned int buf = 0;

        for (unsigned int j : merge_time_test[i]) {
            buf += j;
        }
        if (!merge_time_test[i].empty()) {
            merge_mid_time.push_back(buf / merge_time_test[i].size());
        }
    }

    cout << "\n\n";

    cout << "Merge sort T(N):\t";
    for (unsigned int i : merge_mid_time) {
        cout << i << "\t";
    }

    cout << "\n\n" << "Global time: " << end_time_global - start_time_global << "\n";

    return 0;
}